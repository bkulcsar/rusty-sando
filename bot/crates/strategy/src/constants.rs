use ethers::{
    prelude::Lazy,
    types::{Address, Bytes, H256, U256},
};
use foundry_evm::revm::primitives::{B160 as rAddress, U256 as rU256};

pub static ONE_ETHER_IN_WEI: Lazy<rU256> = Lazy::new(|| rU256::from(1000000000000000000_u128));
pub static WETH_FUND_AMT: Lazy<rU256> = Lazy::new(|| rU256::from(69) * *ONE_ETHER_IN_WEI);

// could generate random address to use at runtime
pub static LIL_ROUTER_CONTROLLER: Lazy<rAddress> = Lazy::new(|| {
    "0xC0ff33C0ffeeC0ff33C0ffeeC0ff33C0ff33C0ff"
        .parse()
        .unwrap()
});

// could generate random address to use at runtime
pub static LIL_ROUTER_ADDRESS: Lazy<rAddress> = Lazy::new(|| {
    "0xDecafC0ffee15BadDecafC0ffee15BadDecafC0f"
        .parse()
        .unwrap()
});

// could compile from `../contract` at runtime instead of parsing from string
pub static LIL_ROUTER_CODE: Lazy<Bytes> = Lazy::new(|| {
    "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806323a69e75146100465780634b588d401461005b57806381eeb93c14610087575b600080fd5b61005961005436600461072b565b61009a565b005b61006e6100693660046107c3565b6101bd565b6040805192835260208301919091520160405180910390f35b61006e6100953660046107c3565b610342565b60008413806100a95750600083135b6100b257600080fd5b6000806100c183850185610824565b9150915081156101425760405163a9059cbb60e01b8152336004820152602481018790526001600160a01b0382169063a9059cbb906044016020604051808303816000875af1158015610118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013c919061085d565b506101b5565b60405163a9059cbb60e01b8152336004820152602481018690526001600160a01b0382169063a9059cbb906044016020604051808303816000875af115801561018f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b3919061085d565b505b505050505050565b600080846001600160a01b038085169086161082816101f05773fffd8963efd1fc6a506488495d951d5263988d256101f7565b6401000276ad5b90506000828860405160200161022292919091151582526001600160a01b0316602082015260400190565b6040516020818303038152906040529050600080856001600160a01b031663128acb0830878f88886040518663ffffffff1660e01b815260040161026a9594939291906108ce565b60408051808303816000875af1158015610288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ac9190610909565b91509150846102bb57816102bd565b805b6102c690610943565b6040516370a0823160e01b81523060048201529098506001600160a01b038a16906370a0823190602401602060405180830381865afa15801561030d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610331919061095f565b965050505050505094509492505050565b60405163a9059cbb60e01b81526001600160a01b03848116600483015260248201869052600091829185169063a9059cbb906044016020604051808303816000875af1158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba919061085d565b50600080600080886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104239190610994565b506001600160701b031691506001600160701b03169150866001600160a01b0316886001600160a01b0316101561045f57819350809250610466565b8093508192505b50506040516370a0823160e01b81526001600160a01b03888116600483015260009184918916906370a0823190602401602060405180830381865afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d7919061095f565b6104e191906109e4565b90506104ee818484610606565b9450600080876001600160a01b0316896001600160a01b03161061051457866000610518565b6000875b6040805160008152602081019182905263022c0d9f60e01b90915291935091506001600160a01b038b169063022c0d9f9061055c90859085903090602481016109fb565b600060405180830381600087803b15801561057657600080fd5b505af115801561058a573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526001600160a01b038b1692506370a082319150602401602060405180830381865afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f6919061095f565b9550505050505094509492505050565b60008084116106705760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201526a1394155517d05353d5539560aa1b60648201526084015b60405180910390fd5b6000831180156106805750600082115b6106dd5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b6064820152608401610667565b60006106eb856103e5610a32565b905060006106f98483610a32565b905060008261070a876103e8610a32565b6107149190610a51565b90506107208183610a69565b979650505050505050565b6000806000806060858703121561074157600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561076757600080fd5b818701915087601f83011261077b57600080fd5b81358181111561078a57600080fd5b88602082850101111561079c57600080fd5b95989497505060200194505050565b6001600160a01b03811681146107c057600080fd5b50565b600080600080608085870312156107d957600080fd5b8435935060208501356107eb816107ab565b925060408501356107fb816107ab565b9150606085013561080b816107ab565b939692955090935050565b80151581146107c057600080fd5b6000806040838503121561083757600080fd5b823561084281610816565b91506020830135610852816107ab565b809150509250929050565b60006020828403121561086f57600080fd5b815161087a81610816565b9392505050565b6000815180845260005b818110156108a75760208185018101518683018201520161088b565b818111156108b9576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528515156020830152604082018590528316606082015260a06080820181905260009061072090830184610881565b6000806040838503121561091c57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b82016109585761095861092d565b5060000390565b60006020828403121561097157600080fd5b5051919050565b80516001600160701b038116811461098f57600080fd5b919050565b6000806000606084860312156109a957600080fd5b6109b284610978565b92506109c060208501610978565b9150604084015163ffffffff811681146109d957600080fd5b809150509250925092565b6000828210156109f6576109f661092d565b500390565b84815283602082015260018060a01b0383166040820152608060608201526000610a286080830184610881565b9695505050505050565b6000816000190483118215151615610a4c57610a4c61092d565b500290565b60008219821115610a6457610a6461092d565b500190565b600082610a8657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d05a3a39858e68f174779d4d5ff004ed05e384a9ba6473cece22080b6d23a91a64736f6c634300080f0033"
        .parse()
        .unwrap()
});

// funciton signature for getting reserves
pub static GET_RESERVES_SIG: Lazy<Bytes> = Lazy::new(|| "0x0902f1ac".parse().unwrap());

pub static ERC20_TRANSFER_EVENT_SIG: Lazy<H256> = Lazy::new(|| {
    "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        .parse()
        .unwrap()
});

pub static WETH_ADDRESS: Lazy<Address> = Lazy::new(|| {
    "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"
        .parse()
        .unwrap()
});

// when we need an address with a lot of eth
pub static SUGAR_DADDY: Lazy<Address> = Lazy::new(|| {
    "0x0966602E47F6a3CA5692529F1D54EcD1d9B09175"
        .parse()
        .unwrap()
});

// could generate random address to use at runtime
pub static COINBASE: Lazy<rAddress> = Lazy::new(|| {
    "0x690B9A9E9aa1C9dB991C7721a92d351Db4FaC990"
        .parse()
        .unwrap()
});

pub static DUST_OVERPAY: Lazy<U256> = Lazy::new(|| ethers::utils::parse_ether("0.00015").unwrap());
